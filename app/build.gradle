apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'org.jetbrains.kotlin.android.extensions'

apply plugin: 'de.mannodermaus.android-junit5'

android {
    compileSdkVersion parent.ext.android_compile_sdk_version
    buildToolsVersion parent.ext.android_build_tools_version

    defaultConfig {
        applicationId parent.ext.android_application_id

        minSdkVersion parent.ext.android_min_sdk_version
        targetSdkVersion parent.ext.android_target_sdk_version

        versionCode parent.ext.android_version_code
        versionName parent.ext.android_version_name

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:design:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation "com.android.support:customtabs:$support_version"
    implementation "com.android.support:cardview-v7:$support_version"
    implementation "com.android.support.constraint:constraint-layout:1.0.2"

    implementation "com.squareup.okhttp3:logging-interceptor:$ok_http_version"
    implementation "com.squareup.okhttp3:okhttp:$ok_http_version"

    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"

    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    implementation "com.jakewharton:disklrucache:$disk_lru_version"

    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
    implementation "jp.wasabeef:glide-transformations:3.0.1"

    implementation "com.afollestad.material-dialogs:core:0.9.6.0"

    implementation "com.facebook.rebound:rebound:0.3.8"

    implementation "com.github.arimorty:floatingsearchview:2.1.1"

    implementation "uk.co.chrisjenx:calligraphy:2.2.0"

    implementation "cn.hikyson.godeye:godeye-core:$god_eye_version"
    debugImplementation "cn.hikyson.godeye:godeye-monitor:$god_eye_version"
    releaseImplementation "cn.hikyson.godeye:godeye-monitor-no-op:$god_eye_version"
    implementation "cn.hikyson.godeye:godeye-toolbox:$god_eye_version"

    testImplementation junit5.unitTests()
    testCompileOnly junit5.unitTestsRuntime()
    testImplementation "com.google.dagger:dagger:$dagger_version"
    kaptTest "com.google.dagger:dagger-android-processor:$dagger_version"
    kaptTest "com.google.dagger:dagger-compiler:$dagger_version"
    testImplementation "org.mockito:mockito-core:2.13.0"
    testImplementation 'com.github.fabioCollini.daggermock:daggermock-kotlin:0.8.2'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

//Switch inline
task createTestResources {

    doLast {
        def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
        if (mock_maker != null) {
            logger.warn("! Using MockMaker ${mock_maker}")
            mockMakerFile.parentFile.mkdirs()
            mockMakerFile.createNewFile()
            mockMakerFile.write(mock_maker)
        } else {
            logger.warn("! Using default MockMaker")
        }
    }
}

task removeTestResources {

    doLast {
        def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")

        if (mockMakerFile.exists()) {
            mockMakerFile.delete()

            mockMakerFile = mockMakerFile.parentFile
            while (mockMakerFile.listFiles().size() == 0) {
                mockMakerFile.delete()
                mockMakerFile = mockMakerFile.parentFile
            }
        }
    }
}

task testMock(type: Exec) {
    commandLine "${rootDir.absolutePath}/gradlew", ':app:test'
}

testMock.dependsOn createTestResources
testMock.finalizedBy removeTestResources